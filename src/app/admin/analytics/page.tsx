
"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { Bar, BarChart, CartesianGrid, XAxis, YAxis, Line, LineChart, Pie, PieChart, Cell, Legend } from "recharts";
import { TrendingUp, Code, Package, Activity } from "lucide-react";
import { getAnalyticsDataAction, getActivityLogAction } from "../actions";
import type { ActivityLogEntry } from "../actions";
import { Skeleton } from "@/components/ui/skeleton";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow } from 'date-fns';

type AnalyticsPageData = {
  generationHistory: { month: string; generated: number }[];
  payloadTypeDistribution: { name: string; value: number; color: string }[];
  languagePopularity: { name: string; count: number }[];
  activityLog: ActivityLogEntry[];
};

const CHART_COLORS = [
  "hsl(var(--chart-1))",
  "hsl(var(--chart-2))",
  "hsl(var(--chart-3))",
  "hsl(var(--chart-4))",
  "hsl(var(--chart-5))",
];

export default function AnalyticsPage() {
  const [data, setData] = useState<AnalyticsPageData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchData() {
        const [analyticsResult, activityResult] = await Promise.all([
            getAnalyticsDataAction(),
            getActivityLogAction()
        ]);
        
        let analyticsPageData: Partial<AnalyticsPageData> = {};

        if (analyticsResult.success && analyticsResult.data) {
            const payloadTypeDistribution = Object.entries(analyticsResult.data.payloadTypeCounts || {})
            .map(([name, value], index) => ({
                name,
                value,
                color: CHART_COLORS[index % CHART_COLORS.length],
            }))
            .sort((a, b) => b.value - a.value);

            const languagePopularity = Object.entries(analyticsResult.data.languageCounts || {})
            .map(([name, count]) => ({ name, count }))
            .sort((a, b) => b.count - a.count);

            analyticsPageData = {
                generationHistory: analyticsResult.data.generationHistory,
                payloadTypeDistribution,
                languagePopularity,
            };
        }

        if (activityResult.success && activityResult.log) {
            analyticsPageData.activityLog = activityResult.log;
        }

        if (analyticsPageData.generationHistory && analyticsPageData.activityLog) {
            setData(analyticsPageData as AnalyticsPageData);
        }

        setLoading(false);
    }
    fetchData();
  }, []);

  const monthlyGenerationsConfig = { generated: { label: "Generations", color: "hsl(var(--primary))" } };
  
  const payloadTypeConfig = data?.payloadTypeDistribution.reduce((acc, cur) => {
      acc[cur.name] = { label: cur.name, color: cur.color };
      return acc;
  }, { value: { label: "Payloads" } } as any);

  const languageConfig = { count: { label: "Count", color: "hsl(var(--accent))" } };

  if (loading) {
    return (
      <div className="space-y-8 opacity-0 animate-fade-in-up">
        <h1 className="text-4xl font-headline tracking-tighter">Application Analytics</h1>
        <p className="text-muted-foreground -mt-4">
          Detailed insights into user activity and payload generation trends.
        </p>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          <Card><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-[200px] w-full" /></CardContent></Card>
          <Card><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-[200px] w-full" /></CardContent></Card>
          <Card className="md:col-span-2 lg:col-span-1"><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-[200px] w-full" /></CardContent></Card>
        </div>
        <Card>
            <CardHeader>
                <CardTitle>Recent Activity</CardTitle>
                <CardDescription>A log of the most recent payloads generated by users.</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <Skeleton className="h-8 w-full" />
                    <Skeleton className="h-8 w-full" />
                    <Skeleton className="h-8 w-full" />
                </div>
            </CardContent>
        </Card>
      </div>
    )
  }

  if (!data) {
     return <div className="text-center text-muted-foreground">Failed to load analytics data. Please try again.</div>;
  }

  return (
    <div className="space-y-8 opacity-0 animate-fade-in-up">
      <h1 className="text-4xl font-headline tracking-tighter">Application Analytics</h1>
      <p className="text-muted-foreground -mt-4">
        Detailed insights into user activity and payload generation trends.
      </p>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <TrendingUp className="w-5 h-5" />
              Monthly Payload Generations
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={monthlyGenerationsConfig} className="h-[200px] w-full">
              <LineChart accessibilityLayer data={data.generationHistory.slice(0, 6)} margin={{ left: -20, right: 10, top: 10, bottom: 0 }}>
                <CartesianGrid vertical={false} />
                <XAxis dataKey="month" tickLine={false} axisLine={false} tickMargin={8} />
                <YAxis tickLine={false} axisLine={false} />
                <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
                <Line dataKey="generated" type="monotone" stroke="var(--color-generated)" strokeWidth={2} dot={true} />
              </LineChart>
            </ChartContainer>
          </CardContent>
        </Card>

        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                    <Package className="w-5 h-5" />
                    Payload Type Distribution
                </CardTitle>
            </CardHeader>
            <CardContent>
                {data.payloadTypeDistribution.length > 0 ? (
                    <ChartContainer config={payloadTypeConfig} className="h-[200px] w-full">
                        <PieChart accessibilityLayer>
                            <ChartTooltip content={<ChartTooltipContent nameKey="name" hideIndicator />} />
                            <Pie data={data.payloadTypeDistribution} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80}>
                                {data.payloadTypeDistribution.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={entry.color} />
                                ))}
                            </Pie>
                            <Legend content={({ payload }) => (
                                <ul className="flex flex-wrap gap-x-4 gap-y-1 justify-center mt-2 text-xs">
                                    {payload?.map((entry, index) => (
                                        <li key={`item-${index}`} className="flex items-center gap-1.5">
                                            <span className="h-2 w-2 rounded-full" style={{ backgroundColor: entry.color }} />
                                            <span>{entry.payload.name}</span>
                                        </li>
                                    ))}
                                </ul>
                            )} />
                        </PieChart>
                    </ChartContainer>
                ) : (
                    <div className="flex items-center justify-center h-[200px] text-muted-foreground">No data yet.</div>
                )}
            </CardContent>
        </Card>

        <Card className="md:col-span-2 lg:col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
                <Code className="w-5 h-5" />
                Language Popularity
            </CardTitle>
          </CardHeader>
          <CardContent>
            {data.languagePopularity.length > 0 ? (
                <ChartContainer config={languageConfig} className="h-[200px] w-full">
                <BarChart accessibilityLayer data={data.languagePopularity} layout="vertical" margin={{ left: 0, right: 10, top: 10 }}>
                    <CartesianGrid horizontal={false} />
                    <XAxis type="number" hide />
                    <YAxis dataKey="name" type="category" tickLine={false} axisLine={false} tickMargin={5} width={80} />
                    <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
                    <Bar dataKey="count" fill="var(--color-count)" radius={4} />
                </BarChart>
                </ChartContainer>
            ) : (
                <div className="flex items-center justify-center h-[200px] text-muted-foreground">No data yet.</div>
            )}
          </CardContent>
        </Card>
      </div>

       <Card>
        <CardHeader>
          <CardTitle>Recent Activity</CardTitle>
          <CardDescription>A log of the most recent payloads generated by users.</CardDescription>
        </CardHeader>
        <CardContent>
            {data.activityLog.length > 0 ? (
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Timestamp</TableHead>
                            <TableHead>Language</TableHead>
                            <TableHead>Payload Type</TableHead>
                            <TableHead className="text-right">Status</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {data.activityLog.map((log, index) => (
                            <TableRow key={index}>
                                <TableCell className="text-muted-foreground">
                                    {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })}
                                </TableCell>
                                <TableCell>{log.language}</TableCell>
                                <TableCell>{log.payloadType}</TableCell>
                                <TableCell className="text-right">
                                    <Badge variant={log.status === 'success' ? 'default' : 'destructive'}>
                                        {log.status}
                                    </Badge>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            ) : (
                <div className="flex flex-col items-center justify-center h-48 text-muted-foreground border-2 border-dashed rounded-lg">
                    <Activity className="w-12 h-12 mb-4" />
                    <p>No activity has been logged yet.</p>
                </div>
            )}
        </CardContent>
       </Card>
    </div>
  );
}
